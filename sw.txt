
b2:
#include <bits/stdc++.h>
using namespace std;

int N; // Number of executable code data
int M; // Number of virus data
int A[20000 + 10]; // Executable code data
int B[10 + 10]; // Virus data
int C[10 + 10]; // sample

int sol; // Correct answer

void InputData(void)
{
	int i;

	cin >> N >> M;

	for (i = 0; i < N; i++) {
		cin >> A[i];
	}

	for (i = 0; i < M; i++) {
		cin >> B[i];
	}
}

void OutputData(void)
{
	cout << sol;
}



int Find(int start)
{
	int i;
	for (i = 0; i < M; i++) {
		C[i] = A[start + i];
	}
	
	sort(C, C + M);
	for (int i = 1; i < M; i++) {
		C[i] -= C[0];
	}
	C[0] = 0;
	
	for (i = 0; i < M; i++) {
		if (B[i] != C[i]) return 0;
	}
	return 1;
}



void Solve(void)
{
	//sort B;
	sort(B, B + M);
	for (int i = 1; i < M; i++) {
		B[i] -= B[0];
	}
	B[0] = 0;
	
	int i;
	for (i = 0; i <= N - M; i++) {
		sol += Find(i);
	}
}

int main(void)
{
	InputData(); // Input

	Solve(); // Problem solving

	OutputData(); // Output

	return 0;
}




b5:
#include <bits/stdc++.h>
using namespace std;

int N;//Number of mushrooms
int P[150000 + 10];//Mushroom value
int dp[150000 + 10][2];

void InputData(){
	cin >> N;
	for (int i = 0; i < N; i++){
		cin >> P[i];
	}
}

//0 -
//1 +
int find(int index, int pre) {
	if (index >= N) return 0;
	
	if (dp[index][pre] != -1) return dp[index][pre];
	
	if (pre == 0) {
		int take = P[index] + find(index + 1, 1);
		int notake = find(index + 1, 0);
		return dp[index][pre] = max(take, notake);
	} else {
		int take = - P[index] + find(index + 1, 0);
		int notake = find(index + 1, 1);
		return dp[index][pre] = max(take, notake);
	}
}

int main(){
	int ans = -1;

	InputData();			//	Input function

	//	Write the code
	memset(dp, -1, sizeof(dp));
	ans = find(0, 0);
	
	
	cout << ans << endl;	//	Output answer
	return 0;
}


b5:
#include <bits/stdc++.h>
using namespace std;

int N;//Number of mushrooms
int P[150000 + 10];//Mushroom value
int dpc[150000 + 5];
int dpt[150000 + 5];

void InputData(){
	cin >> N;
	for (int i = 0; i < N; i++){
		cin >> P[i];
	}
}

int main(){
	int ans = -1;

	InputData();			//	Input function

	//	Write the code
	dpc[0] =  P[0];
	dpt[0] = 0;
	for (int i = 0; i< N; i++) {
		dpc[i] = max (dpt[i-1] + P[i], dpc[i-1]);
		dpt[i] = max (dpc[i-1] - P[i], dpt[i-1]);
	}
	
	ans = max(dpc[N-1],dpt[N-1]);
	cout << ans << endl;	//	Output answer
	return 0;
}



special_integer_pair:
#include<bits/stdc++.h>
using namespace std;
int n, k;
int const MAX_N = 50005;
int a[MAX_N];
int b[MAX_N];
int c[MAX_N];

//ci - D =< cj <= ci + D;
// bool check(int mid) {
//     int cnt = 0;
//     for (int i = 0; i < n; i++) {
//         int p1 = lower_bound(c, c+n, c[i] - mid) - c;
//         int p2 = upper_bound(c, c+n, c[i] + mid) - c -1;
//         if (p2 > p1) cnt += p2-p1;
//     }

//     return false;
// }

bool check(int mid) {
    int cnt = 0;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (abs(c[i] - c[j]) <= mid) cnt ++;
            if (cnt >= k) return true;
        }
    }
    return false;
}


int main() {
    //freopen("input.txt", "r", stdin);
    int T;
    cin >> T;
    //T = 1;
    while (T > 0) {
        T--;
        cin >> n >> k;

        for (int i = 0; i< n; i++) {
            cin >> a[i];
        }

        for (int i = 0; i< n; i++) {
            cin >> b[i];
            c[i] = a[i] - b[i];
        }

        sort(c, c + n);
        //for (int i = 0; i< n; i++) cout << c[i] << " ";

        int D = -1;
        int l = 0;
        int r = 1e7;
        int mid;
        while(l <= r) {
            mid = (l + r)/2;
            if (check(mid)) {
                D = mid;
                r = mid -1;
            } else {
                l = mid + 1;
            }
        }
        cout << D << endl;
    }
    return 0;
}


